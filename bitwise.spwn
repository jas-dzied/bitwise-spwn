pad_with_zero = (item1: @string, item2: @string) {
    max_length = $.max(item1.length, item2.length)
    return [
        "0" * (max_length-item1.length) + item1,
        "0" * (max_length-item2.length) + item2
    ]
}

type @bw
impl @bw {
    and: (op1: @string, op2: @string) {
        let result = pad_with_zero(op1, op2)
        item1 = result[0]
        item2 = result[1]
        let output = ""
        for i in ..item1.length {
            if item1[i] == "1" && item2[i] == "1" { output += "1" }
            else { output += "0" }
        }
        return output
    },
    or: (op1: @string, op2: @string) {
        let result = pad_with_zero(op1, op2)
        item1 = result[0]
        item2 = result[1]
        let output = ""
        for i in ..item1.length {
            if item1[i] == "1" || item2[i] == "1" { output += "1" }
            else { output += "0" }
        }
        return output
    },
    xor: (op1: @string, op2: @string) {
        let result = pad_with_zero(op1, op2)
        item1 = result[0]
        item2 = result[1]
        let output = ""
        for i in ..item1.length {
            if (item1[i] == "1" && item2[i] == "0") || (item1[i] == "0" && item2[i] == "1") { output += "1" }
            else { output += "0" }
        }
        return output
    },
    not: (op1: @string) {
        let output = ""
        for i in ..op1.length {
            if op1[i] == "1" { output += "0" }
            else { output += "1" }
        }
        return output
    }
}

to_arr = (str: @string) {
    let output = []
    for char in str {
        output.push(char)
    }
    return output
}

impl @bw {
    lshift_once: (op1: @string) {
        let output = ""
        for i in 1..op1.length {
            output += op1[i]
        }
        return output+"0"
    },
    lshift: (op1: @string, amount: @number = 1) {
        let current = op1
        for i in ..amount {
            current = @bw::lshift_once(current)
        }
        return current
    },
    rshift_once: (op1: @string) {
        let output = ""
        for i in 0..op1.length-1 {
            output += op1[i]
        }
        return "0"+output
    },
    rshift: (op1: @string, amount: @number = 1) {
        let current = op1
        for i in ..amount {
            current = @bw::rshift_once(current)
        }
        return current
    },
    lrotate_once: (op1: @string) {
        let modded = "".join(to_arr(@bw::lshift_once(op1))[:op1.length-1])
        return modded + op1[0]
    },
    lrotate: (op1: @string, amount: @number = 1) {
        let current = op1
        for i in ..amount {
            current = @bw::lrotate_once(current)
        }
        return current
    },
    rrotate_once: (op1: @string) {
        let modded = "".join(to_arr(@bw::rshift_once(op1))[1:])
        return op1[op1.length-1] + modded
    },
    rrotate: (op1: @string, amount: @number = 1) {
        let current = op1
        for i in ..amount {
            current = @bw::rrotate_once(current)
        }
        return current
    }
}

return @bw
